# (base: https://github.com/actions/starter-workflows/blob/ba767afb30b1bceb8c1d6a798d526be9b6f14554/ci/node.js.yml)
name: Node CI

on: [push, pull_request]

env:
  PIPING_SERVER_CHECK_VERSION: 0.11.0

jobs:
  build:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
#        node-version: [12.x, 14.x, 16.x, 18.x]
#        node-version: [12.x, 14.x, 16.x]
#        node-version: [18.x]
        node-version: [18.x]
#        node-version: [19.x]
    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
    - run: npm ci
    - run: npm run lint
    - run: npm run build
    - run: npm test
    - name: Create certificates
      run: cd /tmp && mkdir ssl_certs && cd ssl_certs && openssl req -x509 -newkey rsa:4096 -keyout server.key -out server.crt -days 365 -sha256 -nodes --subj '/CN=localhost/'
    - name: Install piping-server-check
      run: cd /tmp && wget -O piping-server-check.deb https://github.com/nwtgck/piping-server-check/releases/download/v${PIPING_SERVER_CHECK_VERSION}/piping-server-check-${PIPING_SERVER_CHECK_VERSION}-linux-amd64.deb && sudo dpkg -i piping-server-check.deb
#    - run: |
#        curl -L https://nodejs.org/dist/v18.15.0/node-v18.15.0-linux-x64.tar.xz | tar xfJ -
#        mv ./node-v18.15.0-linux-x64/bin/node node
    - run: wget https://nwtgck-public.netlify.app/pc && chmod +x pc
#    - name: SSH debug
#      run: |
#        # (base: https://github.com/Cryolite/gha-sandbox/blob/789130f01504a372775be9a2fe4d8df6c4e0ce5c/.github/workflows/ssh.yaml)
#        set -euo pipefail
#        authorized_keys_file="$(sudo sshd -T 2>/dev/null | grep -E '^authorizedkeysfile ' | cut -d ' ' -f 2)"
#        authorized_keys_file="$(cd && realpath -m "$authorized_keys_file")"
#        sshd_config_dir="$(dirname "$authorized_keys_file")"
#        (umask 0077 && mkdir "$sshd_config_dir")
#        echo $authorized_keys_file
#
#        # (from: https://qiita.com/zackey2/items/429c77e5780ba8bc1bf9#authorized_keys%E3%81%AB%E8%A8%AD%E5%AE%9A%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95)
#        (umask 0077 && (echo; curl -sS https://github.com/nwtgck.keys; echo) >> "$authorized_keys_file")
#
#        curl -sSN https://ppng.io/${{ secrets.DEBUG_PATH }}/cs | nc localhost 22 | curl -sSNT - https://ppng.io/${{ secrets.DEBUG_PATH }}/sc
#    - run: |
#        ulimit
#        sudo sysctl --all
    - name: piping-server-check
      run: ./pc --http1.1 --concurrency 1 --check post_first_chunked_long_transfer --server-command='mkdir -p /tmp/logs && exec node ./dist/src/index.js --http-port=$HTTP_PORT 2>&1 | tee /tmp/logs/"${SERVER_RUN_ID}".log > /dev/stderr' --transfer-speed-byte $((1024)) --transfer-span 3s --transfer-span 10s --transfer-span 1m
      timeout-minutes: 4
    - name: Show server logs from piping-server-check
      if: ${{ always() }}
      run: tail -n +1 /tmp/logs/*

#  docker_test:
#    runs-on: ubuntu-20.04
#    steps:
#    - uses: actions/checkout@v3
#    - run: docker build -t piping-server .
#    - name: Create certificates
#      run: cd /tmp && mkdir ssl_certs && cd ssl_certs && openssl req -x509 -newkey rsa:4096 -keyout server.key -out server.crt -days 365 -sha256 -nodes --subj '/CN=localhost/'
#    - name: Install piping-server-check
#      run: cd /tmp && wget -O piping-server-check.deb https://github.com/nwtgck/piping-server-check/releases/download/v${PIPING_SERVER_CHECK_VERSION}/piping-server-check-${PIPING_SERVER_CHECK_VERSION}-linux-amd64.deb && sudo dpkg -i piping-server-check.deb
#    - name: piping-server-check
#      run: piping-server-check --http1.1 --concurrency 1 --check post_first_chunked_long_transfer --server-command="${SERVER_COMMAND}" --transfer-speed-byte $((1024)) --transfer-span 3s --transfer-span 10s --transfer-span 1m
#      env:
#        SERVER_COMMAND: 'mkdir -p /tmp/logs && exec docker run --rm -p $HTTP_PORT:80 -p $HTTPS_PORT:443 -v /tmp/ssl_certs:/ssl_certs piping-server --http-port=80 --enable-https=true --https-port=443 --key-path=/ssl_certs/server.key --crt-path=/ssl_certs/server.crt 2>&1 | tee /tmp/logs/$(date "+%s%3N").log > /dev/stderr'
#      timeout-minutes: 3
#    - name: Show server logs from piping-server-check
#      if: ${{ always() }}
#      run: tail -n +1 /tmp/logs/*

